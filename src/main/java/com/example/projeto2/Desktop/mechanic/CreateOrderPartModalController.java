package com.example.projeto2.Desktop.mechanic;

import com.example.projeto2.Services.EncomendaFornecedorService;
import com.example.projeto2.Services.FornecedorService;
import com.example.projeto2.Services.PecaService;
import com.example.projeto2.Tables.EncomendaFornecedor;
import com.example.projeto2.Tables.Fornecedor;
import com.example.projeto2.Tables.Peca;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;

@Component
public class CreateOrderPartModalController implements Initializable {

    @FXML
    private TextField partNameField;

    @FXML
    private TextField quantityField;

    @FXML
    private TextField referenceField;

    @FXML
    private TextField priceField;

    @FXML
    private ComboBox<Fornecedor> supplierComboBox; // Add ComboBox

    private final PecaService pecaService; // Inject PecaService
    private final FornecedorService fornecedorService; // Inject FornecedorService
    private final EncomendaFornecedorService encomendaFornecedorService; // Inject EncomendaFornecedorService

    private Stage dialogStage;
    private boolean createdAndOrdered = false;
    private BigDecimal createdPartId; // To hold the ID of the newly created part
    private Peca createdPart; // To hold the newly created part object

    @Autowired
    public CreateOrderPartModalController(PecaService pecaService, FornecedorService fornecedorService, EncomendaFornecedorService encomendaFornecedorService) {
        this.pecaService = pecaService;
        this.fornecedorService = fornecedorService;
        this.encomendaFornecedorService = encomendaFornecedorService;
    }

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        loadSuppliers(); // Load suppliers into the ComboBox
    }

    public void setDialogStage(Stage dialogStage) {
        this.dialogStage = dialogStage;
    }

    public void setPartName(String partName) {
        this.partNameField.setText(partName);
        this.partNameField.setEditable(false); // Part name is pre-filled and not editable
    }

    public boolean isCreatedAndOrdered() {
        return createdAndOrdered;
    }

    public Peca getCreatedPart() {
        return createdPart;
    }

    public BigDecimal getQuantity() {
        return new BigDecimal(quantityField.getText());
    }

    private void loadSuppliers() {
        List<Fornecedor> suppliers = fornecedorService.getAllFornecedores();
        ObservableList<Fornecedor> supplierList = FXCollections.observableArrayList(suppliers);
        supplierComboBox.setItems(supplierList);
        // Set a cell factory or string converter if you want to display something other than the default toString()
        supplierComboBox.setPromptText("Select Supplier");
    }

    @FXML
    private void handleCancel() {
        createdAndOrdered = false;
        dialogStage.close();
    }

        @FXML
        private void handleCreateAndOrder() {
            String partName = partNameField.getText();
            String quantityText = quantityField.getText();
            Fornecedor selectedSupplier = supplierComboBox.getSelectionModel().getSelectedItem();
    
            if (partName == null || partName.isEmpty() || quantityText == null || quantityText.isEmpty() || selectedSupplier == null) {
                showAlert(Alert.AlertType.ERROR, "Error", "Creation and Order Failed", "All fields are required and a supplier must be selected.");
                return;
            }
    
            BigDecimal quantity = null;
            try {
                quantity = new BigDecimal(quantityText);
                if (quantity.compareTo(BigDecimal.ZERO) <= 0) {
                    showAlert(Alert.AlertType.ERROR, "Invalid Quantity", "Invalid Quantity", "Quantity must be a positive number.");
                    return;
                }
            } catch (NumberFormatException e) {
                showAlert(Alert.AlertType.ERROR, "Invalid Quantity", "Invalid Quantity", "Please enter a valid number for quantity.");
                return;
            }
    
            try {
                // 1. Create the new Part
                Peca newPart = new Peca();
                // Assuming ID is generated by the database, so we don't set it here
                newPart.setNome(partName);
                newPart.setQtd(BigDecimal.ZERO); // Initial quantity is zero as it's being ordered

                // Set other part properties like reference and price if available in the UI
                String reference = referenceField.getText();
                if (reference != null && !reference.isEmpty()) {
                    newPart.setReferencia(reference);
                }

                String priceText = priceField.getText();
                if (priceText != null && !priceText.isEmpty()) {
                    try {
                        BigDecimal price = new BigDecimal(priceText);
                        newPart.setPreco(price);
                    } catch (NumberFormatException e) {
                        showAlert(Alert.AlertType.WARNING, "Invalid Price", "Invalid Price", "Please enter a valid number for price.");
                        return;
                    }
                }

                createdPartId = pecaService.savePeca(newPart);
                createdPart = pecaService.getPecaById(createdPartId);
                
                                if (createdPart == null) {
                                    showAlert(Alert.AlertType.ERROR, "Creation and Order Failed", "Part Not Found", "Could not retrieve the newly created part.");
                                    return;
                                }
    
                // 2. Create a new Supplier Order header
                EncomendaFornecedor newOrder = encomendaFornecedorService.createSupplierOrder(selectedSupplier);
    
                // 3. Add the newly created part as a line item to the order
                // We need the saved part with its generated ID to create the line item
                encomendaFornecedorService.addPartToSupplierOrder(newOrder, createdPart, quantity);
    
                createdAndOrdered = true;
                showAlert(Alert.AlertType.INFORMATION, "Success", "Part Created and Ordered", "Part created and order placed successfully.");
                dialogStage.close();
    
            } catch (Exception e) {
                showAlert(Alert.AlertType.ERROR, "Creation and Order Failed", "Creation and Order Failed", "An error occurred while creating the part or placing the order: " + e.getMessage());
                e.printStackTrace();
                createdAndOrdered = false;
            }
        }
    
        private void showAlert(Alert.AlertType alertType, String title, String header, String content) {
            Alert alert = new Alert(alertType);
            alert.setTitle(title);
            alert.setHeaderText(header);
            alert.setContentText(content);
            alert.showAndWait();
        }
    }